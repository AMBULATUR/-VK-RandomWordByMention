<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VkNet.NLog.Extensions.Logging</name>
    </assembly>
    <members>
        <member name="T:VkNet.NLog.Extensions.Logging.CommonExtensions">
            <summary>
            Методы расширения для совместимости с NET45
            </summary>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.CommonExtensions.GetTypeInfo(System.Type)">
            <summary>
            Получить информацию о типе
            </summary>
            <param name="type"> Тип </param>
            <returns> Тип </returns>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.CommonExtensions.GetDeclaredProperty(System.Type,System.String)">
            <summary>
            Получить задекларированный тип
            </summary>
            <param name="type">Тип данных</param>
            <param name="name">Имя свойства</param>
            <returns></returns>
        </member>
        <member name="T:VkNet.NLog.Extensions.Logging.Extensions.ConfigureExtensions">
            <summary>
            Helpers for .NET Core
            </summary>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.Extensions.ConfigureExtensions.AddNLog(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Enable NLog as logging provider in .NET Core.
            </summary>
            <param name="factory"></param>
            <returns>ILoggerFactory for chaining</returns>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.Extensions.ConfigureExtensions.AddNLog(Microsoft.Extensions.Logging.ILoggerFactory,VkNet.NLog.Extensions.Logging.NLogProviderOptions)">
            <summary>
            Enable NLog as logging provider in .NET Core.
            </summary>
            <param name="factory"></param>
            <param name="options">NLog options</param>
            <returns>ILoggerFactory for chaining</returns>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.Extensions.ConfigureExtensions.AddNLog(Microsoft.Extensions.Logging.ILoggingBuilder)">
            <summary>
            Enable NLog as logging provider in .NET Core.
            </summary>
            <param name="factory"></param>
            <returns>ILoggerFactory for chaining</returns>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.Extensions.ConfigureExtensions.AddNLog(Microsoft.Extensions.Logging.ILoggingBuilder,VkNet.NLog.Extensions.Logging.NLogProviderOptions)">
            <summary>
            Enable NLog as logging provider in .NET Core.
            </summary>
            <param name="factory"></param>
            <param name="options">NLog options</param>
            <returns>ILoggerFactory for chaining</returns>
        </member>
        <member name="T:VkNet.NLog.Extensions.Logging.NLogBeginScopeParser">
            <summary>
            Converts Microsoft Extension Logging BeginScope into NLog NestedDiagnosticsLogicalContext + MappedDiagnosticsLogicalContext
            </summary>
        </member>
        <member name="P:VkNet.NLog.Extensions.Logging.NLogBeginScopeParser.ScopeProperties.Properties">
            <summary>
            Properties, never null and lazy init
            </summary>
        </member>
        <member name="T:VkNet.NLog.Extensions.Logging.NLogLogger">
            <summary>
            Wrap NLog's Logger in a Microsoft.Extensions.Logging's interface <see cref="T:Microsoft.Extensions.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.NLogLogger.TryParseMessageTemplate(NLog.LogLevel,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.Object}},VkNet.NLog.Extensions.Logging.NLogMessageParameterList@)">
            <summary>
            Checks if the already parsed input message-parameters must be sent through
            the NLog MessageTemplate Parser for proper handling of message-template syntax.
            </summary>
            <remarks>
            Using the NLog MesageTemplate Parser will hurt performance: 1 x Microsoft Parser - 2 x NLog Parser - 1 x NLog Formatter
            </remarks>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.NLogLogger.TryParseMessageParameterList(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Convert IList to <see cref="T:VkNet.NLog.Extensions.Logging.NLogMessageParameterList"/>
            </summary>
            <param name="messageProperties"></param>
            <returns></returns>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.NLogLogger.AddExtraPropertiesToLogEvent(NLog.LogEventInfo,System.Collections.Generic.List{NLog.MessageTemplates.MessageTemplateParameter})">
            <summary>
            Append extra property on <paramref name="eventInfo"/>
            </summary>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.NLogLogger.CreateLogEventInfoParameters(VkNet.NLog.Extensions.Logging.NLogMessageParameterList,NLog.MessageTemplates.MessageTemplateParameters,System.Collections.Generic.List{NLog.MessageTemplates.MessageTemplateParameter}@)">
            <summary>
            Allocates object[]-array for <see cref="P:NLog.LogEventInfo.Parameters"/> after checking
            for mismatch between Microsoft Extension Logging and NLog Message Template Parser
            </summary>
            <remarks>
            Cannot trust the parameters received from Microsoft Extension Logging, as extra parameters can be injected
            </remarks>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.NLogLogger.AllParameterCorrectlyPositionalMapped(VkNet.NLog.Extensions.Logging.NLogMessageParameterList,NLog.MessageTemplates.MessageTemplateParameters)">
            <summary>
            Are all parameters positional and correctly mapped?
            </summary>
            <param name="messageParameters"></param>
            <param name="messagetTemplateParameters"></param>
            <returns>true if correct</returns>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.NLogLogger.AddExtraProperty(System.Collections.Generic.List{NLog.MessageTemplates.MessageTemplateParameter},NLog.MessageTemplates.MessageTemplateParameter)">
            <summary>
            Add Property and init list if needed
            </summary>
            <param name="extraProperties"></param>
            <param name="item"></param>
            <returns>list with at least one item</returns>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.NLogLogger.FindMaxIndex(NLog.MessageTemplates.MessageTemplateParameters)">
            <summary>
            Find max index of the parameters
            </summary>
            <param name="messagetTemplateParameters"></param>
            <returns>index, 0 or higher</returns>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.NLogLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Is logging enabled for this logger at this <paramref name="logLevel"/>?
            </summary>
            <param name="logLevel"></param>
            <returns></returns>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.NLogLogger.IsEnabled(NLog.LogLevel)">
            <summary>
            Is logging enabled for this logger at this <paramref name="logLevel"/>?
            </summary>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.NLogLogger.ConvertLogLevel(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Convert loglevel to NLog variant.
            </summary>
            <param name="logLevel">level to be converted.</param>
            <returns></returns>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.NLogLogger.BeginScope``1(``0)">
            <summary>
            Begin a scope. Use in config with ${ndlc} 
            </summary>
            <param name="state">The state (message)</param>
            <returns></returns>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.NLogLogger.NullScope.Dispose">
            <inheritdoc />
        </member>
        <member name="T:VkNet.NLog.Extensions.Logging.NLogLoggerFactory">
            <summary>
            Creating DI loggers for Microsoft.Extensions.Logging and NLog
            </summary>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.NLogLoggerFactory.#ctor">
            <summary>
            New factory with default options
            </summary>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.NLogLoggerFactory.#ctor(VkNet.NLog.Extensions.Logging.NLogProviderOptions)">
            <summary>
            New factory with options. 
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.NLogLoggerFactory.Dispose">
            <summary>
            Cleanup
            </summary>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.NLogLoggerFactory.Dispose(System.Boolean)">
            <summary>
            Cleanup
            </summary>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.NLogLoggerFactory.CreateLogger(System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.Extensions.Logging.ILogger" /> instance.
            </summary>
            <param name="categoryName">The logger name for messages produced by the logger.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Logging.ILogger" />.</returns>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.NLogLoggerFactory.AddProvider(Microsoft.Extensions.Logging.ILoggerProvider)">
            <summary>
            Do nothing
            </summary>
            <param name="provider">The <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider" />.</param>
        </member>
        <member name="T:VkNet.NLog.Extensions.Logging.NLogLoggerProvider">
            <summary>
            Provider logger for NLog + Microsoft.Extensions.Logging
            </summary>
        </member>
        <member name="P:VkNet.NLog.Extensions.Logging.NLogLoggerProvider.Options">
            <summary>
            NLog options
            </summary>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.NLogLoggerProvider.#ctor">
            <summary>
            New provider with default options, see <see cref="P:VkNet.NLog.Extensions.Logging.NLogLoggerProvider.Options"/>
            </summary>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.NLogLoggerProvider.#ctor(VkNet.NLog.Extensions.Logging.NLogProviderOptions)">
            <summary>
            New provider with options
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.NLogLoggerProvider.CreateLogger(System.String)">
            <summary>
            Create a logger with the name <paramref name="name"/>.
            </summary>
            <param name="name">Name of the logger to be created.</param>
            <returns>New Logger</returns>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.NLogLoggerProvider.Dispose">
            <summary>
            Cleanup
            </summary>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.NLogLoggerProvider.Dispose(System.Boolean)">
            <summary>
            Cleanup
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.NLogLoggerProvider.RegisterHiddenAssembliesForCallSite">
            <summary>
            Ignore assemblies for ${callsite}
            </summary>
        </member>
        <member name="T:VkNet.NLog.Extensions.Logging.NLogMessageParameterList">
            <summary>
            Converts Microsoft Extension Logging ParameterList into NLog MessageTemplate ParameterList
            </summary>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.NLogMessageParameterList.TryParse(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Create a <see cref="T:VkNet.NLog.Extensions.Logging.NLogMessageParameterList"/> if <paramref name="parameterList"/> has values, otherwise <c>null</c>
            </summary>
            <remarks>
            The LogMessageParameterList-constructor initiates all the parsing/scanning
            </remarks>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.NLogMessageParameterList.IsValidParameterList(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Nullable{System.Int32}@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Verify that the input parameterList contains non-empty key-values and the orignal-format-property at the end
            </summary>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.NLogMessageParameterList.CreateValidParameterList(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Extract all valid properties from the input parameterList, and return them in a newly allocated list
            </summary>
        </member>
        <member name="T:VkNet.NLog.Extensions.Logging.NLogProviderOptions">
            <summary>
            Options for logging to NLog with 
            </summary>
        </member>
        <member name="P:VkNet.NLog.Extensions.Logging.NLogProviderOptions.EventIdSeparator">
            <summary>
            Separator between for EventId.Id and EventId.Name. Default to .
            </summary>
        </member>
        <member name="P:VkNet.NLog.Extensions.Logging.NLogProviderOptions.IgnoreEmptyEventId">
            <summary>
            Skip allocation of <see cref="P:NLog.LogEventInfo.Properties" />-dictionary
            </summary>
            <remarks>
            using
                <c>default(EventId)</c></remarks>
        </member>
        <member name="P:VkNet.NLog.Extensions.Logging.NLogProviderOptions.CaptureMessageTemplates">
            <summary>
            Enable structured logging by capturing message template parameters and inject into the <see cref="P:NLog.LogEventInfo.Properties" />-dictionary
            </summary>
        </member>
        <member name="P:VkNet.NLog.Extensions.Logging.NLogProviderOptions.CaptureMessageProperties">
            <summary>
            Enable capture of properties from the ILogger-State-object, both in <see cref="M:Microsoft.Extensions.Logging.ILogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})"/> and <see cref="M:Microsoft.Extensions.Logging.ILogger.BeginScope``1(``0)"/>
            </summary>
        </member>
        <member name="P:VkNet.NLog.Extensions.Logging.NLogProviderOptions.ParseMessageTemplates">
            <summary>
            Use the NLog engine for parsing the message template (again) and format using the NLog formatter
            </summary>
        </member>
        <member name="P:VkNet.NLog.Extensions.Logging.NLogProviderOptions.IncludeScopes">
            <summary>
            Enable capture of scope information and inject into <see cref="T:NLog.NestedDiagnosticsLogicalContext" /> and <see cref="T:NLog.MappedDiagnosticsLogicalContext" />
            </summary>
        </member>
        <member name="M:VkNet.NLog.Extensions.Logging.NLogProviderOptions.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Object" /> class.</summary>
        </member>
        <member name="F:VkNet.NLog.Extensions.Logging.NLogProviderOptions.Default">
            <summary>
            Default options
            </summary>
        </member>
    </members>
</doc>
